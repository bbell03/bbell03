{
  "version": 3,
  "sources": ["../../../data/siteMetadata.js", "../../../contentlayer.config.ts", "../../../lib/notion-client.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: 'Software Engineering & Design',\n  author: 'Brandon Bell',\n  headerTitle: 'Brandon Bell',\n  description: 'A blog created with Next.js and Tailwind.css',\n  language: 'en-us',\n  theme: 'system', // system, dark or light\n  siteUrl: 'https://tailwind-nextjs-starter-blog.vercel.app',\n  siteRepo: 'https://github.com/timlrx/tailwind-nextjs-starter-blog',\n  siteLogo: '/static/images/logo.png',\n  socialBanner: '/static/images/twitter-card.png',\n  mastodon: 'https://mastodon.social/@mastodonuser',\n  email: 'address@yoursite.com',\n  github: 'https://github.com',\n  x: 'https://twitter.com/x',\n  // twitter: 'https://twitter.com/Twitter',\n  facebook: 'https://facebook.com',\n  youtube: 'https://youtube.com',\n  linkedin: 'https://www.linkedin.com',\n  threads: 'https://www.threads.net',\n  instagram: 'https://www.instagram.com',\n  locale: 'en-US',\n  analytics: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.\n    umamiAnalytics: {\n      // We use an env variable for this site to avoid other users cloning our analytics ID\n      umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000\n      // You may also need to overwrite the script if you're storing data in the US - ex:\n      // src: 'https://us.umami.is/script.js'\n      // Remember to add 'us.umami.is' in `next.config.js` as a permitted domain for the CSP\n    },\n    // plausibleAnalytics: {\n    //   plausibleDataDomain: '', // e.g. tailwind-nextjs-starter-blog.vercel.app\n    // },\n    // simpleAnalytics: {},\n    // posthogAnalytics: {\n    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // googleAnalytics: {\n    //   googleAnalyticsId: '', // e.g. G-XXXXXXX\n    // },\n  },\n  newsletter: {\n    // supports mailchimp, buttondown, convertkit, klaviyo, revue, emailoctopus\n    // Please add your .env file and modify it according to your selection\n    provider: 'buttondown',\n  },\n  comments: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // Select a provider and use the environment variables associated to it\n    // https://vercel.com/docs/environment-variables\n    provider: 'giscus', // supported providers: giscus, utterances, disqus\n    giscusConfig: {\n      // Visit the link below, and follow the steps in the 'configuration' section\n      // https://giscus.app/\n      repo: process.env.NEXT_PUBLIC_GISCUS_REPO,\n      repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,\n      category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,\n      categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,\n      mapping: 'pathname', // supported options: pathname, url, title\n      reactions: '1', // Emoji reactions: 1 = enable / 0 = disable\n      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable\n      metadata: '0',\n      // theme example: light, dark, dark_dimmed, dark_high_contrast\n      // transparent_dark, preferred_color_scheme, custom\n      theme: 'light',\n      // theme when dark mode\n      darkTheme: 'transparent_dark',\n      // If the theme option above is set to 'custom`\n      // please provide a link below to your custom theme css file.\n      // example: https://giscus.app/themes/custom_example.css\n      themeURL: '',\n      // This corresponds to the `data-lang=\"en\"` in giscus's configurations\n      lang: 'en',\n    },\n  },\n  search: {\n    provider: 'kbar', // kbar or algolia\n    kbarConfig: {\n      searchDocumentsPath: 'search.json', // path to load documents to search\n    },\n    // provider: 'algolia',\n    // algoliaConfig: {\n    //   // The application ID provided by Algolia\n    //   appId: 'R2IYF7ETH7',\n    //   // Public API key: it is safe to commit it\n    //   apiKey: '599cec31baffa4868cae4e79f180729b',\n    //   indexName: 'docsearch',\n    // },\n  },\n}\n\nmodule.exports = siteMetadata\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer2/source-files';\nimport fs from 'fs';\nimport { writeFileSync } from 'fs';\nimport readingTime from 'reading-time';\nimport { slug } from 'github-slugger';\nimport path from 'path';\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';\n// Remark packages\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\nimport { remarkAlert } from 'remark-github-blockquote-alert';\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins/index.js';\n// Rehype packages\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeKatex from 'rehype-katex';\nimport rehypeCitation from 'rehype-citation';\nimport rehypePrismPlus from 'rehype-prism-plus';\nimport rehypePresetMinify from 'rehype-preset-minify';\n// Use CommonJS require for siteMetadata to avoid default export issues\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst siteMetadata = require('./data/siteMetadata');\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js';\nimport type { PageObjectResponse, RichTextItemResponse } from \"@notionhq/client/build/src/api-endpoints\"\n// --- Notion integration ---\nconst NOTION_ENABLED = process.env.NOTION_API_KEY && process.env.NOTION_DATABASE_ID;\n\ntype Blog = {\n  object?: PageObjectResponse;\n  id?: string;\n  title: string;\n  slug: string;\n  date: string;\n  tags: string[];\n  summary?: string;\n  draft?: boolean;\n  layout?: string;\n  authors?: string[];\n  images?: any[];\n  bibliography?: string;\n  canonicalUrl?: string;\n};\n\n// Import the new Notion client (TypeScript module)\nimport { notionClient } from './lib/notion-client';\n\nexport async function translateNotionBlogsToMDX(databaseId: string, outputDir: string) {\n  if (!NOTION_ENABLED) {\n    console.log('Notion integration is disabled. Skipping Notion blog import.');\n    return;\n  }\n\n  try {\n    console.log('\uD83D\uDD04 Syncing Notion content...');\n    const posts = await notionClient.fetchBlogPosts(databaseId);\n    await notionClient.exportToMDX(posts, outputDir);\n    console.log('\u2705 Notion content synced successfully');\n  } catch (error) {\n    console.error('\u274C Failed to sync Notion content:', error);\n  }\n}\n\n// This function is now handled by the notionClient\nexport async function fetchNotionBlogs(databaseId: string): Promise<Blog[]> {\n  if (!NOTION_ENABLED) return [];\n  \n  try {\n    const posts = await notionClient.fetchBlogPosts(databaseId);\n    return posts.map(post => ({\n      object: undefined,\n      id: post.id,\n      title: post.title,\n      slug: post.slug,\n      date: post.date,\n      tags: post.tags,\n      summary: post.summary,\n      draft: post.draft,\n      layout: post.layout,\n      authors: post.authors,\n      images: post.cover ? [post.cover] : [],\n      bibliography: '',\n      canonicalUrl: '',\n    }));\n  } catch (error) {\n    console.error('Failed to fetch Notion blogs:', error);\n    return [];\n  }\n}\n\nconst root = process.cwd();\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Heroicon mini link\nconst icon = fromHtmlIsomorphic(\n  `\n  <span class=\"content-header-link\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-5 h-5 linkicon\">\n  <path d=\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\" />\n  <path d=\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l-1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\" />\n  </svg>\n  </span>\n`,\n  { fragment: true }\n);\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n};\n\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {};\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        const formattedTag = slug(tag);\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1;\n        } else {\n          tagCount[formattedTag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount));\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    );\n    // console.log('Local search index generated...');\n  }\n}\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n    },\n    path: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n    filePath: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFilePath,\n    },\n  },\n}));\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'json' },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\n        url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\n      }),\n    },\n  },\n}));\n\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n      remarkAlert,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: 'prepend',\n          headingProperties: {\n            className: ['content-header'],\n          },\n          content: icon,\n        },\n      ],\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allBlogs: importedBlogs } = await importData();\n    const allBlogs: Blog[] = importedBlogs.map((blog, index) => ({\n      object: undefined, // No Notion object for non-Notion blogs\n      id: blog.slug || `default-id-${index}`,\n      title: blog.title,\n      slug: blog.slug,\n      date: blog.date,\n      tags: blog.tags,\n      summary: blog.summary,\n      draft: blog.draft,\n      layout: blog.layout,\n      authors: blog.authors,\n      images: blog.images,\n      bibliography: blog.bibliography,\n      canonicalUrl: blog.canonicalUrl,\n    }));\n\n    // Example usage of 'allBlogs' to avoid unused variable warnings\n    allBlogs.forEach((blog) => {\n      // console.log(`Blog Title: ${blog.title}, ID: ${blog.id}`);\n    });\n\n    if (NOTION_ENABLED) {\n      // Translate Notion blogs to MDX and save them\n      const notionOutputDir = path.join(process.cwd(), 'data/blog/notion');\n      await translateNotionBlogsToMDX(process.env.NOTION_DATABASE_ID || '', notionOutputDir);\n      console.log('Notion blogs have been translated to MDX and saved.');\n    } else {\n      console.log('Notion integration is disabled. Skipping Notion blog import.');\n    }\n  },\n});\n", "import { Client } from '@notionhq/client';\nimport { NotionToMarkdown } from 'notion-to-md';\nimport fs from 'fs';\nimport path from 'path';\n\n// Types for Notion integration\nexport interface NotionBlogPost {\n  id: string;\n  title: string;\n  slug: string;\n  date: string;\n  tags: string[];\n  summary?: string;\n  draft: boolean;\n  layout: string;\n  authors: string[];\n  cover?: string;\n  content: string;\n  lastModified: string;\n}\n\nexport interface NotionCache {\n  lastFetched: string;\n  databaseId: string;\n  posts: Record<string, NotionBlogPost>;\n  contentHash: string;\n}\n\nclass NotionClient {\n  private client: Client;\n  private n2m: NotionToMarkdown;\n  private cachePath: string;\n  private cache: NotionCache | null = null;\n\n  constructor() {\n    if (!process.env.NOTION_API_KEY) {\n      throw new Error('NOTION_API_KEY environment variable is required');\n    }\n\n    this.client = new Client({ auth: process.env.NOTION_API_KEY });\n    this.n2m = new NotionToMarkdown({ notionClient: this.client });\n    this.cachePath = path.join(process.cwd(), 'data/blog/notion/cache/notion-cache.json');\n  }\n\n  private async loadCache(): Promise<NotionCache | null> {\n    try {\n      if (fs.existsSync(this.cachePath)) {\n        const cacheData = fs.readFileSync(this.cachePath, 'utf8');\n        return JSON.parse(cacheData);\n      }\n    } catch (error) {\n      console.warn('Failed to load cache:', error);\n    }\n    return null;\n  }\n\n  private async saveCache(cache: NotionCache): Promise<void> {\n    try {\n      const cacheDir = path.dirname(this.cachePath);\n      if (!fs.existsSync(cacheDir)) {\n        fs.mkdirSync(cacheDir, { recursive: true });\n      }\n      fs.writeFileSync(this.cachePath, JSON.stringify(cache, null, 2));\n    } catch (error) {\n      console.error('Failed to save cache:', error);\n    }\n  }\n\n  private generateContentHash(posts: NotionBlogPost[]): string {\n    const content = posts.map(p => `${p.id}-${p.lastModified}`).join('|');\n    return require('crypto').createHash('md5').update(content).digest('hex');\n  }\n\n  async fetchBlogPosts(databaseId: string): Promise<NotionBlogPost[]> {\n    // Load existing cache\n    this.cache = await this.loadCache();\n    \n    try {\n      // Fetch from Notion API\n      const response = await this.client.databases.query({\n        database_id: databaseId,\n        sorts: [{ property: 'Date', direction: 'descending' }],\n        filter: {\n          property: 'Draft',\n          checkbox: {\n            equals: false\n          }\n        }\n      });\n\n      const posts: NotionBlogPost[] = [];\n\n      for (const page of response.results) {\n        if ('properties' in page) {\n          const post = await this.processNotionPage(page);\n          if (post) {\n            posts.push(post);\n          }\n        }\n      }\n\n      // Check if content has changed\n      const newContentHash = this.generateContentHash(posts);\n      const hasChanged = !this.cache || \n                        this.cache.contentHash !== newContentHash ||\n                        this.cache.databaseId !== databaseId;\n\n      if (hasChanged) {\n        // Update cache\n        this.cache = {\n          lastFetched: new Date().toISOString(),\n          databaseId,\n          posts: posts.reduce((acc, post) => ({ ...acc, [post.id]: post }), {}),\n          contentHash: newContentHash\n        };\n        await this.saveCache(this.cache);\n        console.log('Notion cache updated');\n      } else {\n        console.log('Using cached Notion content');\n      }\n\n      return posts;\n    } catch (error) {\n      console.error('Failed to fetch Notion posts:', error);\n      // Return cached posts if available\n      if (this.cache) {\n        return Object.values(this.cache.posts);\n      }\n      return [];\n    }\n  }\n\n  private async processNotionPage(page: any): Promise<NotionBlogPost | null> {\n    try {\n      const properties = page.properties;\n      \n      // Extract basic properties\n      const title = this.extractTextContent(properties.Title?.title) || 'Untitled';\n      const slug = this.extractTextContent(properties.Slug?.rich_text) || \n                   `notion-${page.id}`;\n      const date = properties.Date?.date?.start || new Date().toISOString().split('T')[0];\n      const tags = properties.Tags?.multi_select?.map((tag: any) => tag.name) || [];\n      const summary = this.extractTextContent(properties.Summary?.rich_text) || '';\n      const draft = properties.Draft?.checkbox || false;\n      const authors = properties.Authors?.multi_select?.map((author: any) => author.name) || [];\n\n      // Skip draft posts\n      if (draft) return null;\n\n      // Fetch page content\n      const mdBlocks = await this.n2m.pageToMarkdown(page.id);\n      const content = this.n2m.toMarkdownString(mdBlocks);\n\n      // Extract cover image\n      const cover = page.cover?.type === 'external' \n        ? page.cover.external.url \n        : page.cover?.file?.url || '';\n\n      return {\n        id: page.id,\n        title,\n        slug,\n        date,\n        tags,\n        summary,\n        draft,\n        layout: 'PostLayout',\n        authors,\n        cover,\n        content: content.parent,\n        lastModified: page.last_edited_time || page.created_time\n      };\n    } catch (error) {\n      console.error(`Failed to process page ${page.id}:`, error);\n      return null;\n    }\n  }\n\n  private extractTextContent(richTextArray: any[] | undefined): string {\n    if (!richTextArray || richTextArray.length === 0) return '';\n    return richTextArray\n      .map(item => item.plain_text || '')\n      .join('')\n      .trim();\n  }\n\n  async exportToMDX(posts: NotionBlogPost[], outputDir: string): Promise<void> {\n    if (!fs.existsSync(outputDir)) {\n      fs.mkdirSync(outputDir, { recursive: true });\n    }\n\n    for (const post of posts) {\n      try {\n        const mdxContent = this.generateMDXContent(post);\n        const filePath = path.join(outputDir, `${post.slug}.mdx`);\n        fs.writeFileSync(filePath, mdxContent, 'utf8');\n        console.log(`Exported: ${post.slug}.mdx`);\n      } catch (error) {\n        console.error(`Failed to export ${post.slug}:`, error);\n      }\n    }\n  }\n\n  private generateMDXContent(post: NotionBlogPost): string {\n    return `---\ntitle: \"${post.title.replace(/\"/g, '\\\\\"')}\"\ndate: \"${post.date}\"\ntags: ${JSON.stringify(post.tags)}\ndraft: ${post.draft}\nsummary: \"${(post.summary || '').replace(/\"/g, '\\\\\"')}\"\nlayout: \"${post.layout}\"\nauthors: ${JSON.stringify(post.authors)}\n${post.cover ? `cover: \"${post.cover}\"` : ''}\nlastmod: \"${post.lastModified}\"\n---\n\n${post.content}\n`.trim();\n  }\n}\n\nexport const notionClient = new NotionClient();\n"],
  "mappings": "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",
  "names": ["siteMetadata", "path", "slug", "path"]
}
