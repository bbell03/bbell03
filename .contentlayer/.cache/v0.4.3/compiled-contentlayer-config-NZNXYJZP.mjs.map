{
  "version": 3,
  "sources": ["../../../data/siteMetadata.js", "../../../contentlayer.config.ts"],
  "sourcesContent": ["/** @type {import(\"pliny/config\").PlinyConfig } */\nconst siteMetadata = {\n  title: 'Software Engineering & Design',\n  author: 'Brandon Bell',\n  headerTitle: 'Brandon Bell',\n  description: 'A blog created with Next.js and Tailwind.css',\n  language: 'en-us',\n  theme: 'system', // system, dark or light\n  siteUrl: 'https://tailwind-nextjs-starter-blog.vercel.app',\n  siteRepo: 'https://github.com/timlrx/tailwind-nextjs-starter-blog',\n  siteLogo: '/static/images/logo.png',\n  socialBanner: '/static/images/twitter-card.png',\n  mastodon: 'https://mastodon.social/@mastodonuser',\n  email: 'address@yoursite.com',\n  github: 'https://github.com',\n  x: 'https://twitter.com/x',\n  // twitter: 'https://twitter.com/Twitter',\n  facebook: 'https://facebook.com',\n  youtube: 'https://youtube.com',\n  linkedin: 'https://www.linkedin.com',\n  threads: 'https://www.threads.net',\n  instagram: 'https://www.instagram.com',\n  locale: 'en-US',\n  analytics: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // supports Plausible, Simple Analytics, Umami, Posthog or Google Analytics.\n    umamiAnalytics: {\n      // We use an env variable for this site to avoid other users cloning our analytics ID\n      umamiWebsiteId: process.env.NEXT_UMAMI_ID, // e.g. 123e4567-e89b-12d3-a456-426614174000\n      // You may also need to overwrite the script if you're storing data in the US - ex:\n      // src: 'https://us.umami.is/script.js'\n      // Remember to add 'us.umami.is' in `next.config.js` as a permitted domain for the CSP\n    },\n    // plausibleAnalytics: {\n    //   plausibleDataDomain: '', // e.g. tailwind-nextjs-starter-blog.vercel.app\n    // },\n    // simpleAnalytics: {},\n    // posthogAnalytics: {\n    //   posthogProjectApiKey: '', // e.g. 123e4567-e89b-12d3-a456-426614174000\n    // },\n    // googleAnalytics: {\n    //   googleAnalyticsId: '', // e.g. G-XXXXXXX\n    // },\n  },\n  newsletter: {\n    // supports mailchimp, buttondown, convertkit, klaviyo, revue, emailoctopus\n    // Please add your .env file and modify it according to your selection\n    provider: 'buttondown',\n  },\n  comments: {\n    // If you want to use an analytics provider you have to add it to the\n    // content security policy in the `next.config.js` file.\n    // Select a provider and use the environment variables associated to it\n    // https://vercel.com/docs/environment-variables\n    provider: 'giscus', // supported providers: giscus, utterances, disqus\n    giscusConfig: {\n      // Visit the link below, and follow the steps in the 'configuration' section\n      // https://giscus.app/\n      repo: process.env.NEXT_PUBLIC_GISCUS_REPO,\n      repositoryId: process.env.NEXT_PUBLIC_GISCUS_REPOSITORY_ID,\n      category: process.env.NEXT_PUBLIC_GISCUS_CATEGORY,\n      categoryId: process.env.NEXT_PUBLIC_GISCUS_CATEGORY_ID,\n      mapping: 'pathname', // supported options: pathname, url, title\n      reactions: '1', // Emoji reactions: 1 = enable / 0 = disable\n      // Send discussion metadata periodically to the parent window: 1 = enable / 0 = disable\n      metadata: '0',\n      // theme example: light, dark, dark_dimmed, dark_high_contrast\n      // transparent_dark, preferred_color_scheme, custom\n      theme: 'light',\n      // theme when dark mode\n      darkTheme: 'transparent_dark',\n      // If the theme option above is set to 'custom`\n      // please provide a link below to your custom theme css file.\n      // example: https://giscus.app/themes/custom_example.css\n      themeURL: '',\n      // This corresponds to the `data-lang=\"en\"` in giscus's configurations\n      lang: 'en',\n    },\n  },\n  search: {\n    provider: 'kbar', // kbar or algolia\n    kbarConfig: {\n      searchDocumentsPath: 'search.json', // path to load documents to search\n    },\n    // provider: 'algolia',\n    // algoliaConfig: {\n    //   // The application ID provided by Algolia\n    //   appId: 'R2IYF7ETH7',\n    //   // Public API key: it is safe to commit it\n    //   apiKey: '599cec31baffa4868cae4e79f180729b',\n    //   indexName: 'docsearch',\n    // },\n  },\n}\n\nmodule.exports = siteMetadata\n", "import { defineDocumentType, ComputedFields, makeSource } from 'contentlayer2/source-files';\nimport fs from 'fs';\nimport { writeFileSync } from 'fs';\nimport readingTime from 'reading-time';\nimport { slug } from 'github-slugger';\nimport path from 'path';\nimport { fromHtmlIsomorphic } from 'hast-util-from-html-isomorphic';\n// Remark packages\nimport remarkGfm from 'remark-gfm';\nimport remarkMath from 'remark-math';\nimport { remarkAlert } from 'remark-github-blockquote-alert';\nimport {\n  remarkExtractFrontmatter,\n  remarkCodeTitles,\n  remarkImgToJsx,\n  extractTocHeadings,\n} from 'pliny/mdx-plugins/index.js';\n// Rehype packages\nimport rehypeSlug from 'rehype-slug';\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\nimport rehypeKatex from 'rehype-katex';\nimport rehypeCitation from 'rehype-citation';\nimport rehypePrismPlus from 'rehype-prism-plus';\nimport rehypePresetMinify from 'rehype-preset-minify';\nimport siteMetadata from './data/siteMetadata';\nimport { allCoreContent, sortPosts } from 'pliny/utils/contentlayer.js';\nimport type { PageObjectResponse, RichTextItemResponse } from \"@notionhq/client/build/src/api-endpoints\"\n// --- Notion integration DISABLED for now ---\nconst NOTION_ENABLED = process.env.NOTION_API_KEY && process.env.NOTION_DATABASE_ID;\n\nlet notion, n2m;\nif (NOTION_ENABLED) {\n  const { Client } = require('@notionhq/client');\n  const { NotionToMarkdown } = require('notion-to-md');\n  notion = new Client({ auth: process.env.NOTION_API_KEY });\n  n2m = new NotionToMarkdown({ notionClient: notion });\n}\n\ntype Blog = {\n  object?: PageObjectResponse;\n  id?: string;\n  title: string;\n  slug: string;\n  date: string;\n  tags: string[];\n  summary?: string;\n  draft?: boolean;\n  layout?: string;\n  authors?: string[];\n  images?: any[];\n  bibliography?: string;\n  canonicalUrl?: string;\n};\n\nexport async function translateNotionBlogsToMDX(databaseId: string, outputDir: string) {\n  if (!NOTION_ENABLED) return; // Notion integration disabled\n  if (!fs.existsSync(outputDir)) {\n    fs.mkdirSync(outputDir, { recursive: true });\n  }\n\n  // Fetch Notion blogs\n  const notionBlogs: Blog[] = await fetchNotionBlogs(databaseId);\n  // console.log(notionBlogs);\n  // console.log(notionBlogs[1].object);\n  // Iterate through each blog and save as MDX\n  for (const blog of notionBlogs) {\n    try {\n      // Ensure the blog ID is defined\n      if (!blog.id) {\n        console.error(`Blog ID is undefined for blog: ${blog.title}`);\n        continue; // Skip this blog if ID is undefined\n      }\n      // console.log(blog);\n      // Fetch page content from Notion using the page ID\n      // console.log(`Fetching content for page: ${blog.id}`); // Log the UUID\n      // const mdBlocks = await n2m.pageToMarkdown(blog.id); // Use the Notion page ID    6 \n      // const pageContent = n2m.toMarkdownString(mdBlocks);\n      const pageContent = await notion.blocks.children.list({\n        block_id: blog.id,\n      });\n\n      // Get cover image if it exists\n      const coverImage = blog.object?.cover?.type === 'external' \n        ? blog.object.cover.external.url \n        : blog.object?.cover?.file?.url || '';\n\n      const content = pageContent.results\n      .map((block: any) => {\n        switch (block.type) {\n          case 'paragraph':\n            return block.paragraph.rich_text[0]?.plain_text || '';\n          case 'heading_1':\n            return `# ${block.heading_1.rich_text[0]?.plain_text || ''}`;\n          case 'heading_2':\n            return `## ${block.heading_2.rich_text[0]?.plain_text || ''}`;\n          case 'heading_3':\n            return `### ${block.heading_3.rich_text[0]?.plain_text || ''}`;\n          case 'bulleted_list_item':\n            return `- ${block.bulleted_list_item.rich_text[0]?.plain_text || ''}`;\n          case 'numbered_list_item':\n            return `1. ${block.numbered_list_item.rich_text[0]?.plain_text || ''}`;\n          case 'quote':\n            return `> ${block.quote.rich_text[0]?.plain_text || ''}`;\n          case 'code':\n            return `\\`\\`\\`\\n${block.code.rich_text[0]?.plain_text || ''}\\n\\`\\`\\``;\n          case 'to_do':\n            return `- [ ] ${block.to_do.rich_text[0]?.plain_text || ''}`;\n          case 'toggle':\n            return `> ${block.toggle.rich_text[0]?.plain_text || ''}`;\n          case 'callout':\n            return `> ${block.callout.rich_text[0]?.plain_text || ''}`;\n          case 'divider':\n            return '---';\n          case 'image':\n            const imageUrl = block.image.type === 'external' \n              ? block.image.external.url \n              : block.image.file?.url || '';\n            return `![${block.image.caption?.[0]?.plain_text || 'Image'}](${imageUrl})`;\n          default:\n            return '';\n        }\n      })\n      .filter(Boolean)\n      .join('\\n\\n');\n\n      //console.log(content);\n      // Generate MDX content\n      const mdxContent = `\n---\ntitle: \"${blog.title}\"\ndate: \"${blog.date}\"\ntags: ${JSON.stringify(blog.tags)}\ndraft: ${blog.draft}\nsummary: \"${blog.summary || ''}\"\nlayout: \"${blog.layout || 'PostLayout'}\"\nauthors: ${JSON.stringify(blog.authors || [])}\ncover: \"${coverImage}\"\n---\n\n${content}\n      `.trim();\n\n      // Save the MDX file\n      const filePath = path.join(outputDir, `${blog.slug}.mdx`);\n      fs.writeFileSync(filePath, mdxContent, 'utf8');\n      // console.log(`Saved Notion blog as MDX: ${filePath}`);\n    } catch (error) {\n      console.error(`Failed to fetch or save content for page: ${blog.id}`, error);\n    }\n  }\n}\n\nexport async function fetchNotionBlogs(databaseId: string): Promise<Blog[]> {\n  if (!NOTION_ENABLED) return [];\n  const response = await notion.databases.query({ database_id: databaseId });\n\n  // console.log('Fetched Notion Blogs:', response.results);\n\n  return response.results\n    .filter((page): page is PageObjectResponse => 'properties' in page)\n    .map((page) => {\n      const properties = page.properties;\n\n      const getTextContent = (richTextArray: RichTextItemResponse[] | undefined): string => {\n        if (!richTextArray || richTextArray.length === 0) return '';\n        const richTextItem = richTextArray[0];\n        if ('text' in richTextItem && richTextItem.text.content) {\n          return richTextItem.text.content;\n        }\n        return '';\n      };\n\n      const title =\n        properties.Title?.type === 'title' && properties.Title.title.length > 0\n          ? getTextContent(properties.Title.title) || ''\n          : 'Untitled';\n\n      const slug =\n        properties.Slug?.type === 'rich_text' && properties.Slug.rich_text.length > 0\n          ? getTextContent(properties.Slug.rich_text) || ''\n          : `notion-${page.id}`; // Use the page ID as a fallback for the slug\n\n      const date =\n        properties.Date?.type === 'date' && properties.Date.date\n          ? properties.Date.date.start\n          : '1970-01-01';\n\n      const tags =\n        properties.Tags?.type === 'multi_select'\n          ? properties.Tags.multi_select.map((tag) => tag.name)\n          : [];\n\n      const summary =\n        properties.Summary?.type === 'rich_text' && properties.Summary.rich_text.length > 0\n          ? getTextContent(properties.Summary.rich_text) || ''\n          : '';\n\n      const draft =\n        properties.Draft?.type === 'checkbox' ? properties.Draft.checkbox : false;\n\n      return {\n        object: page, // Include the object property\n        id: page.id, // Add the Notion page ID (UUID)\n        page: page, // Add the page property\n        title,\n        slug,\n        date,\n        tags,\n        summary,\n        draft,\n        layout: 'PostLayout',\n        authors: [], // Default to an empty array\n        images: [],\n        bibliography: '',\n        canonicalUrl: '',\n      };\n    });\n}\n\nconst root = process.cwd();\nconst isProduction = process.env.NODE_ENV === 'production';\n\n// Heroicon mini link\nconst icon = fromHtmlIsomorphic(\n  `\n  <span class=\"content-header-link\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\" fill=\"currentColor\" className=\"w-5 h-5 linkicon\">\n  <path d=\"M12.232 4.232a2.5 2.5 0 0 1 3.536 3.536l-1.225 1.224a.75.75 0 0 0 1.061 1.06l1.224-1.224a4 4 0 0 0-5.656-5.656l-3 3a4 4 0 0 0 .225 5.865.75.75 0 0 0 .977-1.138 2.5 2.5 0 0 1-.142-3.667l3-3Z\" />\n  <path d=\"M11.603 7.963a.75.75 0 0 0-.977 1.138 2.5 2.5 0 0 1 .142 3.667l-3 3a2.5 2.5 0 0 1-3.536-3.536l-1.225-1.224a.75.75 0 0 0-1.061-1.06l-1.224 1.224a4 4 0 1 0 5.656 5.656l3-3a4 4 0 0 0-.225-5.865Z\" />\n  </svg>\n  </span>\n`,\n  { fragment: true }\n);\n\nconst computedFields: ComputedFields = {\n  readingTime: { type: 'json', resolve: (doc) => readingTime(doc.body.raw) },\n  slug: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n  },\n  path: {\n    type: 'string',\n    resolve: (doc) => doc._raw.flattenedPath,\n  },\n  filePath: {\n    type: 'string',\n    resolve: (doc) => doc._raw.sourceFilePath,\n  },\n  toc: { type: 'string', resolve: (doc) => extractTocHeadings(doc.body.raw) },\n};\n\nfunction createTagCount(allBlogs) {\n  const tagCount: Record<string, number> = {};\n  allBlogs.forEach((file) => {\n    if (file.tags && (!isProduction || file.draft !== true)) {\n      file.tags.forEach((tag) => {\n        const formattedTag = slug(tag);\n        if (formattedTag in tagCount) {\n          tagCount[formattedTag] += 1;\n        } else {\n          tagCount[formattedTag] = 1;\n        }\n      });\n    }\n  });\n  writeFileSync('./app/tag-data.json', JSON.stringify(tagCount));\n}\n\nfunction createSearchIndex(allBlogs) {\n  if (\n    siteMetadata?.search?.provider === 'kbar' &&\n    siteMetadata.search.kbarConfig.searchDocumentsPath\n  ) {\n    writeFileSync(\n      `public/${siteMetadata.search.kbarConfig.searchDocumentsPath}`,\n      JSON.stringify(allCoreContent(sortPosts(allBlogs)))\n    );\n    // console.log('Local search index generated...');\n  }\n}\n\nexport const Authors = defineDocumentType(() => ({\n  name: 'Authors',\n  filePathPattern: 'authors/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    name: { type: 'string', required: true },\n    avatar: { type: 'string' },\n    occupation: { type: 'string' },\n    company: { type: 'string' },\n    email: { type: 'string' },\n    twitter: { type: 'string' },\n    linkedin: { type: 'string' },\n    github: { type: 'string' },\n    layout: { type: 'string' },\n  },\n  computedFields: {\n    slug: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^.+?(\\/)/, ''),\n    },\n    path: {\n      type: 'string',\n      resolve: (doc) => doc._raw.flattenedPath,\n    },\n    filePath: {\n      type: 'string',\n      resolve: (doc) => doc._raw.sourceFilePath,\n    },\n  },\n}));\n\nexport const Blog = defineDocumentType(() => ({\n  name: 'Blog',\n  filePathPattern: 'blog/**/*.mdx',\n  contentType: 'mdx',\n  fields: {\n    title: { type: 'string', required: true },\n    date: { type: 'date', required: true },\n    tags: { type: 'list', of: { type: 'string' }, default: [] },\n    lastmod: { type: 'date' },\n    draft: { type: 'boolean' },\n    summary: { type: 'string' },\n    images: { type: 'json' },\n    authors: { type: 'list', of: { type: 'string' } },\n    layout: { type: 'string' },\n    bibliography: { type: 'string' },\n    canonicalUrl: { type: 'string' },\n  },\n  computedFields: {\n    ...computedFields,\n    structuredData: {\n      type: 'json',\n      resolve: (doc) => ({\n        '@context': 'https://schema.org',\n        '@type': 'BlogPosting',\n        headline: doc.title,\n        datePublished: doc.date,\n        dateModified: doc.lastmod || doc.date,\n        description: doc.summary,\n        image: doc.images ? doc.images[0] : siteMetadata.socialBanner,\n        url: `${siteMetadata.siteUrl}/${doc._raw.flattenedPath}`,\n      }),\n    },\n  },\n}));\n\n\nexport default makeSource({\n  contentDirPath: 'data',\n  documentTypes: [Blog, Authors],\n  mdx: {\n    cwd: process.cwd(),\n    remarkPlugins: [\n      remarkExtractFrontmatter,\n      remarkGfm,\n      remarkCodeTitles,\n      remarkMath,\n      remarkImgToJsx,\n      remarkAlert,\n    ],\n    rehypePlugins: [\n      rehypeSlug,\n      [\n        rehypeAutolinkHeadings,\n        {\n          behavior: 'prepend',\n          headingProperties: {\n            className: ['content-header'],\n          },\n          content: icon,\n        },\n      ],\n      rehypeKatex,\n      [rehypeCitation, { path: path.join(root, 'data') }],\n      [rehypePrismPlus, { defaultLanguage: 'js', ignoreMissing: true }],\n      rehypePresetMinify,\n    ],\n  },\n  onSuccess: async (importData) => {\n    const { allBlogs: importedBlogs } = await importData();\n    const allBlogs: Blog[] = importedBlogs.map((blog, index) => ({\n      object: undefined, // No Notion object for non-Notion blogs\n      id: blog.slug || `default-id-${index}`,\n      title: blog.title,\n      slug: blog.slug,\n      date: blog.date,\n      tags: blog.tags,\n      summary: blog.summary,\n      draft: blog.draft,\n      layout: blog.layout,\n      authors: blog.authors,\n      images: blog.images,\n      bibliography: blog.bibliography,\n      canonicalUrl: blog.canonicalUrl,\n    }));\n\n    // Example usage of 'allBlogs' to avoid unused variable warnings\n    allBlogs.forEach((blog) => {\n      // console.log(`Blog Title: ${blog.title}, ID: ${blog.id}`);\n    });\n\n    if (NOTION_ENABLED) {\n      // Translate Notion blogs to MDX and save them\n      const notionOutputDir = path.join(process.cwd(), 'data/blog/notion');\n      await translateNotionBlogsToMDX(process.env.NOTION_DATABASE_ID || '', notionOutputDir);\n      console.log('Notion blogs have been translated to MDX and saved.');\n    } else {\n      console.log('Notion integration is disabled. Skipping Notion blog import.');\n    }\n  },\n});\n"],
  "mappings": "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",
  "names": ["siteMetadata", "slug", "siteMetadata"]
}
