import { readFileSync, writeFileSync } from 'fs'
import { glob } from 'glob'
import path from 'path'

async function fixContentlayerAsserts() {
  try {
    // Find all .mjs files in .contentlayer/generated
    const files = await glob('.contentlayer/generated/**/*.mjs')
    
    for (const file of files) {
      let content = readFileSync(file, 'utf8')
      
      // Check if file contains assert or with syntax
      if (content.includes('assert { type: \'json\' }') || content.includes('with { type: \'json\' }')) {
        console.log(`Fixing import syntax in ${file}`)
        
        // Replace import statements with assert syntax
        content = content.replace(
          /import (\w+) from '([^']+)' assert \{ type: 'json' \}/g,
          (match, varName, filePath) => {
            const relativePath = filePath.replace('./', '')
            return `const ${varName} = JSON.parse(readFileSync(join(__dirname, '${relativePath}'), 'utf8'))`
          }
        )
        
        // Replace import statements with with syntax
        content = content.replace(
          /import (\w+) from '([^']+)' with \{ type: 'json' \}/g,
          (match, varName, filePath) => {
            const relativePath = filePath.replace('./', '')
            return `const ${varName} = JSON.parse(readFileSync(join(__dirname, '${relativePath}'), 'utf8'))`
          }
        )
        
        // Add imports at the top if not already present
        if (!content.includes('import { readFileSync }')) {
          content = content.replace(
            '// NOTE This file is auto-generated by Contentlayer\n',
            `// NOTE This file is auto-generated by Contentlayer

import { readFileSync } from 'fs'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

`
          )
        }
        
        writeFileSync(file, content)
        console.log(`‚úÖ Fixed ${file}`)
      }
    }
    
    console.log('üéâ All contentlayer assert syntax issues fixed!')
  } catch (error) {
    console.error('‚ùå Error fixing contentlayer asserts:', error)
    process.exit(1)
  }
}

fixContentlayerAsserts()
